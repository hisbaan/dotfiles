-- -- local status, jdtls = pcall(require, "jdtls")
-- -- if not status then
-- --     return
-- -- end
--
-- -- Determine OS
-- local home = os.getenv("HOME")
-- if vim.fn.has "mac" == 1 then
--     WORKSPACE_PATH = home .. "/.jdtls-workspace/"
--     CONFIG = "mac"
-- elseif vim.fn.has "unix" == 1 then
--     WORKSPACE_PATH = home .. "/.jdtls-workspace/"
--     CONFIG = "linux"
-- else
--     print "Unsupported system"
-- end
-- local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ":p:h:t")
-- local workspace_dir = WORKSPACE_PATH .. project_name
--
-- -- Find root of project
-- local root_markers = { ".git", "mvnw", "gradlew", "pom.xml", "build.gradle" }
-- local root_dir = require("jdtls.setup").find_root(root_markers)
-- if root_dir == "" then
--     return
-- end
--
-- local extendedClientCapabilities = require("jdtls").extendedClientCapabilities
-- extendedClientCapabilities.resolveAdditionalTextEditsSupport = true
--
-- JAVA_DAP_ACTIVE = true
--
-- local bundles = {
--   vim.fn.glob(
--     home .. "/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-*.jar"
--   ),
-- }
--
-- -- vim.list_extend(bundles, vim.split(vim.fn.glob(home .. "/.config/nvim/vscode-java-test/server/*.jar"), "\n"))
--
-- local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
-- capabilities.textDocument.foldingRange = {
--     dynamicRegistration = true,
--     lineFoldingOnly = true
-- }
--
-- -- See `:help vim.lsp.start_client` for an overview of the supported `config` options.
-- local config = {
--     -- The command that starts the language server
--     -- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line
--     cmd = {
--         "java", -- or '/path/to/java11_or_newer/bin/java'
--         "-Declipse.application=org.eclipse.jdt.ls.core.id1",
--         "-Dosgi.bundles.defaultStartLevel=4",
--         "-Declipse.product=org.eclipse.jdt.ls.core.product",
--         "-Dlog.protocol=true",
--         "-Dlog.level=ALL",
--         "-Xms1g",
--         "--add-modules=ALL-SYSTEM",
--         "--add-opens", "java.base/java.util=ALL-UNNAMED",
--         "--add-opens", "java.base/java.lang=ALL-UNNAMED",
--         "-javaagent:" .. home .. "/.local/share/nvim/mason/packages/jdtls/lombok.jar",
--         "-jar", vim.fn.glob(home .. "/.local/share/nvim/mason/packages/jdtls/plugins/org.eclipse.equinox.launcher_*.jar"),
--         "-configuration", home .. "/.local/share/nvim/mason/packages/jdtls/config_" .. CONFIG,
--         "-data", workspace_dir,
--     },
--     on_attach = function(client, bufnr)
--         -- vim.lsp.codelens.refresh()
--         require("jdtls").setup_dap { hotcodereplace = "auto" }
--         require("jdtls.dap").setup_dap_main_class_configs()
--         client.resolved_capabilities.document_formatting = false
--         -- client.resolved_capabilities.textDocument.completion.completionItem.snippetSupport = false
--         vim.cmd([[
--         nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
--         nnoremap <silent> gD <cmd>lua vim.lsp.buf.declaration()<CR>
--         nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
--         nnoremap <silent> gi <cmd>lua vim.lsp.buf.implementation()<CR>
--         nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
--         nnoremap <silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
--         nnoremap <silent> <C-n> <cmd>lua vim.diagnostic.goto_next()<CR>
--         nnoremap <silent> <C-p> <cmd>lua vim.diagnostic.goto_prev()<CR>
--         ]])
--     end,
--     capabilities = capabilities,
--     -- One dedicated LSP server & client will be started per unique root_dir
--     root_dir = root_dir,
--
--     -- Here you can configure eclipse.jdt.ls specific settings
--     -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
--     -- or https://github.com/redhat-developer/vscode-java#supported-vs-code-settings
--     -- for a list of options
--     settings = {
--         java = {
--             eclipse = {
--                 downloadSources = true,
--             },
--             configuration = {
--                 updateBuildConfiguration = "interactive",
--             },
--             maven = {
--                 downloadSources = true,
--             },
--             references = {
--                 includeDecompiledSources = true,
--             },
--             -- Set this to true to use jdtls as your formatter
--             format = {
--                 enabled = false,
--             },
--         },
--         signatureHelp = { enabled = true },
--         completion = {
--             favoriteStaticMembers = {},
--         },
--         -- contentProvider = { preferred = "fernflower" },
--         extendedClientCapabilities = extendedClientCapabilities,
--         sources = {
--             organizeImports = {
--                 starThreshold = 9999,
--                 staticStarThreshold = 9999,
--             },
--         },
--         codeGeneration = {
--             toString = {
--                 template = "${object.className}{${member.name()}=${member.value}, ${otherMembers}}",
--             },
--             useBlocks = true,
--         },
--     },
--
--     flags = {
--         allow_incremental_sync = true,
--     },
--
--     -- Language server `initializationOptions`
--     -- You need to extend the `bundles` with paths to jar files
--     -- if you want to use additional eclipse.jdt.ls plugins.
--     --
--     -- See https://github.com/mfussenegger/nvim-jdtls#java-debug-installation
--     --
--     -- If you don't plan on using the debugger or other eclipse.jdt.ls plugins you can remove this
--     init_options = {
--         bundles = {},
--     },
-- }
--
-- -- This starts a new client & server,
-- -- or attaches to an existing client & server depending on the `root_dir`.
-- require("jdtls").start_or_attach(config)
--
-- -- vim.cmd "command! -buffer -nargs=? -complete=custom,v:lua.require'jdtls'._complete_compile JdtCompile lua require('jdtls').compile(<f-args>)"
-- -- vim.cmd "command! -buffer -nargs=? -complete=custom,v:lua.require'jdtls'._complete_set_runtime JdtSetRuntime lua require('jdtls').set_runtime(<f-args>)"
-- -- vim.cmd "command! -buffer JdtUpdateConfig lua require('jdtls').update_project_config()"
-- -- vim.cmd "command! -buffer JdtBytecode lua require('jdtls').javap()"
--
-- -- -- Shorten function name
-- -- local keymap = vim.keymap.set
-- -- -- Silent keymap option
-- -- local opts = { silent = true }
--
-- -- keymap("n", "<leader>jo", "<Cmd>lua require('jdtls').organize_imports()<CR>", opts)
-- -- keymap("n", "<leader>jv", "<Cmd>lua require('jdtls').extract_variable()<CR>", opts)
-- -- keymap("n", "<leader>jc", "<Cmd>lua require('jdtls').extract_constant()<CR>", opts)
-- -- keymap("n", "<leader>jt", "<Cmd>lua require'jdtls'.test_nearest_method()<CR>", opts)
-- -- keymap("n", "<leader>jT", "<Cmd>lua require('jdtls').test_class()<CR>", opts)
-- -- keymap("n", "<leader>ju", "<Cmd>JdtUpdateConfig<CR>", opts)
-- --
-- -- keymap("v", "<leader>jv", "<Esc><Cmd>lua require('jdtls').extract_variable(true)<CR>", opts)
-- -- keymap("v", "<leader>jc", "<Esc><Cmd>lua require('jdtls').extract_constant(true)<CR>", opts)
-- -- keymap("v", "<leader>jm", "<Esc><Cmd>lua require('jdtls').extract_method(true)<CR>", opts)
-- --
